#!/usr/bin/env python3
# -*- coding: utf-8, vim: expandtab:ts=4 -*-
from datetime import datetime

from bs4 import BeautifulSoup
from trafilatura import extract

from html2tei.tei_utils import tei_defaultdict, create_new_tag_with_string


def _create_empty_paragraph_list(url, body_log):
    # Logging is required in both use cases of this function
    body_log.log('WARNING', f'trafilatura did not find any relevant text in the article: {url}')
    empty_soup = BeautifulSoup(features='lxml-xml')
    empty_paragraph_list = [create_new_tag_with_string(empty_soup, '', 'p')]
    return empty_paragraph_list


def process_article(one_page_of_article_things, body_log, get_meta_fun, spec_body_params):

    _ = body_log, get_meta_fun, spec_body_params  # Silence IDE
    url, warc_response_datetime, warc_id, raw_html = one_page_of_article_things
    metas_in_dict = tei_defaultdict()
    metas_in_dict['sch:url'] = url

    # Extracted in xml format so paragraphs are automatically tagged as 'p', 'quote', 'list', etc.
    extracted_xml = extract(raw_html, target_language='hu', output_format='xml')
    soup = BeautifulSoup(extracted_xml, 'lxml-xml')

    doc = soup.find('doc')
    if doc is not None:

        if 'date' in doc.attrs.keys():
            # trafilatura returns uniform str '%y-%m-%d' e.g.: '2020-10-17'
            metas_in_dict['sch:datePublished'] = datetime.fromisoformat(doc['date'])

        if 'author' in doc.attrs.keys():
            metas_in_dict['sch:author'] = doc['author']

        if 'title' in doc.attrs.keys():
            metas_in_dict['sch:name'] = doc['title']

        keywords = doc.attrs.get('tags', [])
        if len(keywords) > 0:
            metas_in_dict['sch:keywords'] = keywords

    paragraph_list = []
    main = soup.find('main')
    if main is not None:
        # The <main> tag of a trafilatura generated xml is split into <p> tags that on occasion contain children tags
        # such as <list>, <item>, or <quote>. paragraph_list is created here as a list of the high level <p> tags
        # and allows children tags generated by trafilatura to remain annotated.
        paragraph_list = [paragraph for paragraph in main.find_all(recursive=False)
                          if paragraph.get_text(strip=True) is not None]

    if len(paragraph_list) == 0:
        paragraph_list = _create_empty_paragraph_list(url, body_log)

    return metas_in_dict, paragraph_list
